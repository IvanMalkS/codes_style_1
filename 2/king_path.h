/*
 * Продолжение задания №2
 * Заголовочные файлы
 * Хромой король.На квадратной доске расставлены монеты, достоинством от 1 до
 * 100. Хромой король, находящийся в правом нижнем углу, мечтает попасть в левый верхний.
 * При этом он может передвигаться только в клетку слева или сверху и хочет, чтобы сумма всех
 * монет, оказавшихся у него на пути, была бы максимальной.Определить эту сумму и путь, каким
 * образом должен двигаться король, чтобы ее собрать.Ввод и вывод организовать при помощи
 * текстовых файлов.Формат входных данных : в первой строке входного файла записано число
 * N - размер доски(1 < N < 80).Далее следует N строк, каждая из которых содержит N целых чисел,
 * представляющих доску.В первую строку выходного файл нужно вывести единственное число :
 * максимальную сумму, а во второй строке вывести путь в виде строки символов, обозначив
 * символом L движение влево, а символом U - движение вверх.
*/

#ifndef KING_PATH_H_
#define KING_PATH_H_

#include <string>
#include <vector>

/**
 * @brief Чтение входных данных из файла
 * @param input_filename Имя входного файла
 * @param coin_board Ссылка на двумерный вектор для хранения значений монет
 * @return Размер доски или -1 в случае ошибки
 */
int ReadInput(const std::string& input_filename,
              std::vector<std::vector<int>>& coin_board);

/**
 * @brief Запись результатов в файл
 * @param output_filename Имя выходного файла
 * @param max_coins Максимальное количество собранных монет
 * @param path_string Строка с путем короля
 * @return true если запись успешна, false в случае ошибки
 */
bool WriteOutput(const std::string& output_filename,
                 int max_coins,
                 const std::string& path_string);

/**
 * @brief Вычисление максимального количества монет на пути короля
 * @param coin_board Доска с монетами
 * @param dp_matrix Матрица для динамического программирования
 * @param board_size Размер доски
 */
void CalculateMaxCoins(const std::vector<std::vector<int>>& coin_board,
                       std::vector<std::vector<int>>& dp_matrix,
                       int board_size);

/**
 * @brief Восстановление пути короля
 * @param dp_matrix Матрица динамического программирования
 * @param board_size Размер доски
 * @return Строка с путем (U - вверх, L - влево)
 */
std::string ReconstructPath(const std::vector<std::vector<int>>& dp_matrix,
                            int board_size);

#endif  // KING_PATH_H_